/////////////////////////////////////////////////
// Clock
/////////////////////////////////////////////////
var fontColor = "black"
var week_day = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday"
];

function Clock() {
  this._arcs = [
    new SunArc(this),
    new LuminosityArc(this),
    //new SleepArc(this),
    new ActivityArc(this),
    new WorkArc(this)
  ];
  this._size = 300;
  this._margin = 5;
  this._data = [];
  this._tooltip = "";
  this._element = "";
  this._elid = "";
  this._innerRadius = 0;
  this._slice_info = "";
}

Clock.prototype.preprocess = function(data) {
  if (data.size) this._size = data.size;
  if (data.margin) this._margin = data.margin;

  this._elid = data.date.substr(0, 10);
  data.date = new Date(data.date);

  this._radius = this._size / 2 - this._margin;
}

Clock.prototype.validate = function(data) {
  for (var i = 0; i < this._arcs.length; i++) {
    this._arcs[i].validate(data);
  };

  return true;
}

Clock.prototype.draw = function(element, data) {
  if (!this.validate(data)) {
    console.log("There was an error in the data provided to the clock");
    return;
  }

  this.preprocess(data);

  this._data = data;

  this._element = d3.select(element).append("div")
                    .attr("class", "clock")
                    .attr("id", this._elid);

  this._tooltip = this._element.append("div")
      .attr("class", "clock-tooltip")
      .style("opacity", 0);

  this._slice_info = this._element.append("div")
      .attr("class", "slice-info")
      .style("visibility", "hidden");

  var svg = this._element.append("svg")
      .attr("class", "clock-arcs")
      .attr("width", this._size)
      .attr("height", this._size);

  var outerRadius = this._radius;
  var walkedRadius = 0;
  for (var i = 0; i < this._arcs.length; i++) {
    var arc = this._arcs[i];
    if (!arc._active) {
      continue;
    }
    var innerRadius = this._radius * (1 - arc._width) - walkedRadius;
    //console.log(data)
    arc.draw(svg, data, outerRadius, innerRadius)
    outerRadius = innerRadius;
    walkedRadius += this._radius - innerRadius;
  };
  this._innerRadius = outerRadius;

  if (data.weather) {
    this.drawWeather(svg);
  }
  new TextArc(this).draw(svg, data.date);
}

Clock.prototype.drawWeather = function(svg) {
  var weather_size = 32;
  var icon = "<%= asset_path('sun.png') %>";
  if (this._data.weather && this._data.weather.events) {
    if (this._data.weather.events.indexOf("Rain") >= 0) {
      icon = "<%= asset_path('rain.png') %>";
    } else if (this._data.weather.events.indexOf("Thunderstorm") >= 0) {
      icon = "<%= asset_path('thunder.png') %>";
    }
  }

  svg.append("svg:image")
    .attr("class", "clock-weather-image")
    .attr("text-anchor", "middle")
    .attr("transform", "translate(" + (this._size / 2 - weather_size * 2.2) + "," + (this._size / 1.8 - weather_size / 2) + ")")
    .attr("x", "0")
    .attr("y", "0")
    .attr("height", weather_size)
    .attr("width", weather_size)
    .attr("xlink:href", icon);

  svg.append("svg:text")
    .attr("class", "clock-weather-max")
    .attr("text-anchor", "middle")
    .attr("transform", "translate(" + this._size / 2 + "," + this._size / 1.8 + ")")
    .text("max: " + this._data.weather.max_temperature + "°C");
  svg.append("svg:text")
    .attr("class", "clock-weather-min")
    .attr("text-anchor", "middle")
    .attr("transform", "translate(" + this._size / 2 + "," + this._size / 1.6 + ")")
    .text("min: " + this._data.weather.min_temperature + "°C");
}

Clock.prototype.arcMouseOn = function(text) {
  this._tooltip.transition()
      .duration(200)
      .style("opacity", .9);
  var offset = $(this._element[0]).offset();
  this._tooltip.text(text)
      .style("left", (d3.event.pageX - offset.left - 50) + "px")
      .style("top", (d3.event.pageY - offset.top - 10) + "px");
}

Clock.prototype.arcMouseOut = function() {
  this._tooltip.transition()
      .duration(500)
      .style("opacity", 0);
}

Clock.prototype.arcMouseClick = function(element, hour) {
  if ($(element).attr('class').indexOf("highlight") > 0) {
    $(this._element[0]).children(".slice-info").css("visibility", "hidden");
    
    var pathClass = $(element).attr("class").replace(new RegExp('(\\s|^)' + 'highlight' + '(\\s|$)', 'g'), '$2');
    $(element).parent().children(".interaction-path").attr("class", pathClass);
  } else {
    var pathClass = $(element).attr("class").replace(new RegExp('(\\s|^)' + 'highlight' + '(\\s|$)', 'g'), '$2');
    $(element).parent().children(".interaction-path").attr("class", pathClass);
    
    $(element).attr("class", $(element).attr("class") + " highlight");
    showDataForClockSlice(this._slice_info, this._data.user_id, this._data.date, hour, this._size,this._data.sleep_jawbones


      );
  }
}

/////////////////////////////////////////////////
// Sun Arc
/////////////////////////////////////////////////

function SunArc(clock) {
  this._clock = clock;
  this._active = true;
  this._width = 0.08;
  this._pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return 1; });
}

SunArc.prototype.validate = function(data) {
  if (!data.sunrise || !data.sunset) {
    this._active = false;
  } else {
    if (!(data.sunrise instanceof Date)) data.sunrise = new Date(data.sunrise);
    if (!(data.sunset instanceof Date)) data.sunset = new Date(data.sunset);
  }
  return this._active;
}

SunArc.prototype.draw = function(svg, data, outerRadius, innerRadius) {
  var sun_scale = d3.scale.linear().domain([0, 24]).range([0, 360]);

  var sunSvg = svg.append("g")
      .attr("class", "sun-arc")
      .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2 + ")");

  var dayStartAngle = sun_scale(data.sunrise.getHours() + data.sunrise.getMinutes() / 60) * Math.PI / 180;
  var dayEndAngle = sun_scale(data.sunset.getHours() + data.sunset.getMinutes() / 60) * Math.PI / 180;

  var sunArc = d3.svg.arc()
    .innerRadius(innerRadius)
    .outerRadius(outerRadius);

  var clock = this._clock;
  var dayPath = sunSvg.append("path")
      .attr("class", "sun-outline-arc")
      .attr("fill", "#7ec7ee")
      .attr("d", sunArc.startAngle(function(d) {
                          return dayStartAngle;
                        }).endAngle(function(d) {
                          return dayEndAngle;
                        }))
      .on("mouseover", function(d) { clock.arcMouseOn('Day'); })
      .on("mouseout", function(d) { clock.arcMouseOut(); });

  var nightPath = sunSvg.append("path")
      .attr("class", "sun-outline-arc")
      .attr("fill", "#5c5c83")
      .attr("d", sunArc.startAngle(function(d) {
                          return dayEndAngle;
                        }).endAngle(function(d) {
                         return dayStartAngle + Math.PI * 2;
                       }))
      .on("mouseover", function(d) { clock.arcMouseOn('Night'); })
      .on("mouseout", function(d) { clock.arcMouseOut(); });

  var alpha = (dayStartAngle + dayEndAngle) / 2;
  var r = (outerRadius + innerRadius) / 2;
  var sunSize = outerRadius * 0.03;

  var sunCircleSvg = sunSvg.append("circle")
      .attr("fill", "yellow")
      .attr("cx", r * Math.sin(alpha))
      .attr("cy", -r * Math.cos(alpha))
      .attr("r", sunSize);

  var moonCircleSvg = sunSvg.append("circle")
      .attr("fill", "lightgray")
      .attr("cx", -r * Math.sin(alpha))
      .attr("cy", r * Math.cos(alpha))
      .attr("r", sunSize);
}

/////////////////////////////////////////////////
// Luminosity Arc
/////////////////////////////////////////////////

function LuminosityArc(clock) {
  this._clock = clock;
  this._active = true;
  this._width = 0.08;
}

LuminosityArc.prototype.validate = function(data) {
  if (!data.luminosity) {
    this._active = false;
  }
  return this._active;
}

LuminosityArc.prototype.draw = function(svg, data, outerRadius, innerRadius) {

  var max_luminosity = d3.max(data.luminosity);
  var luminosity_scale = d3.scale.linear().domain([0, max_luminosity / 2, max_luminosity]).range(["#999900", "#cccc00", "#ffff66"]);

  var innerPie = d3.layout.pie()
      .sort(null)
      .padAngle(-0.01)
      .value(function(d) { return 1; });

  var luminositySvg = svg.append("g")
      .attr("class", "luminosity-arc")
      .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2 + ")");

  var luminosityArc = d3.svg.arc()
      .innerRadius(innerRadius)
      .outerRadius(outerRadius);

  var clock = this._clock;
  var luminosityOuterPath = luminositySvg.selectAll(".luminosity-outline-arc")
      .data(innerPie(data.luminosity))
    .enter().append("path")
      .attr("class", "luminosity-outline-arc")
      .attr("fill", function(d) { return luminosity_scale(d.data); })
      .attr("d", luminosityArc)
      .on("mouseover", function(d) { clock.arcMouseOn("Luminosity " + d.data); })
      .on("mouseout", function(d) { clock.arcMouseOut(); });
}

/////////////////////////////////////////////////
// Activity Arc
/////////////////////////////////////////////////

function ActivityArc(clock) {
  this._clock = clock;
  this._active = true;
  this._width = 0.3;
  this._has_appointments = false;
}

ActivityArc.prototype.validate = function(data) {
  if (!data.activities) {
    this._active = false;
  }
  if (data.appointments) {
    this._has_appointments = true;
  }
  return this._active;
}

ActivityArc.prototype.draw = function(svg, data, outerRadius, innerRadius) {
  var max_activity = d3.max(data.activities, function(d) { return d.activity; });
  if ($('.clocks-relative-to-all').is(":checked")) {
    max_activity = max_selected_activity;
  }
  var activity_scale = d3.scale.linear().domain([0, max_activity]).range([10, 100]);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return 1; });
  var index = 0
  var sleepNodes = []
  var activityArc = d3.svg.arc()
      .innerRadius(innerRadius)
      .outerRadius(function(d) { 
        if (d.data.activity == "sleep") {
          return  (outerRadius - innerRadius) * (activity_scale(max_activity) / 100.0) + innerRadius;
          console.log("entrei no sono")
        } else 
          {
            if(data.sleep_jawbones){
            var sleepColor = d3.scale.linear().domain([1,2,3]).range(["#6baed6", "#9edae5", "#c6dbef"]);
            
            //console.log(index)
            var value = 0
            var hasSleep = false
            //console.log(d3.selectAll("path"))
            var i = 0;
            //for(i=0;i<data.sleep_jawbones.length;i++){
              var depthNumber = 0;
              var depthTotal = 0;
              var depthAverage = 0;
              while(i < data.sleep_jawbones.length)
              {

                var horario = new Date((data.sleep_jawbones[i].datetime))
                if(horario.getHours() == index)
                {
                  value = (d.data.activity < (max_activity * 0.05) && d.data.activity != 0) ? (max_activity * 0.05) : d.data.activity
                  //console.log(index)
                  //var slice = d3.select(this)
                  //slice.style('fill', 'red')
                  console.log(horario.getHours())
                  
                  depthNumber = depthNumber + 1;
                  depthTotal = depthTotal + data.sleep_jawbones[i].depth;

                  hasSleep = true;
                  //break
                  
                }
                else if (hasSleep)
                {
                  if (depthNumber!=0)
                  {
                    depthAverage = depthTotal/depthNumber;
                  }
                  else
                  {
                    depthAverage = 1;
                  }
                  console.log(depthAverage)
                  var slice = d3.select(this);
                  slice.style('fill', sleepColor(Math.round(depthAverage)));
                  //hasSleep = false
                  break;
                }
              i++;
              }
              if(i==data.sleep_jawbones.length && horario.getHours() == index)
              {
                if (depthNumber!=0)
                  {
                    depthAverage = depthTotal/depthNumber;
                  }
                  else
                  {
                    depthAverage = 1;
                  }
                  console.log(depthAverage)
                  var slice = d3.select(this);
                  slice.style('fill', sleepColor(depthAverage));
                  //hasSleep = false
              }
            index = index + 1;
          }
        }
          if(!hasSleep){
            var slice = d3.select(this);
            var value = (d.data.activity < (max_activity * 0.05) && d.data.activity != 0) ? (max_activity * 0.05) : d.data.activity
            slice.style('fill', '#1f77b4');
          }
          return (outerRadius - innerRadius) * (activity_scale(value) / 100.0) + innerRadius;
        
      });

  var activityOutlineArc = d3.svg.arc()
      .innerRadius(innerRadius)
      .outerRadius(outerRadius);
//console.log(d3.selectAll("path"))
/*
  for(i=0;i<sleepNodes.length;i++){
    slices = d3.selectAll("path");
    slices[sleepNodes[i] + 2].style("fill", "red");
  }
*/
  var activitySvg = svg.append("g")
      .attr("class", "activity-arc")
      .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2 + ")");

  var path = activitySvg.selectAll(".solid-arc")
      .data(pie(data.activities))
    .enter().append("path")
      .attr("class", "solid-arc")
      .attr("d", activityArc);

  var clock = this._clock;
  var outerPath = activitySvg.selectAll(".outline-arc")
      .data(pie(data.activities))
    .enter().append("path")
      .attr("class", "outline-arc interaction-path")
      .attr("d", activityOutlineArc)
      .attr("stroke-width", function(d) { return d.data.ev ? '4px' : '2px' })
      .attr("stroke", function(d) { return d.data.ev ? '#444' : 'black' })
      .on("mouseover", function(d) { clock.arcMouseOn("Activity " + d.data.activity); })
      .on("mouseout", function(d) { clock.arcMouseOut(); })
      .on("mousedown", function(d, i) { clock.arcMouseClick(this, i + 1); });
}
///////////////////////////////////////////////////////////////////////
// Sleep Arc
///////////////////////////////////////////////////////////////////////
function SleepArc(clock) {
  this._clock = clock;
  this._active = true;
  this._width = 0.3;
}

SleepArc.prototype.colorFor = function(depth) {
  if (depth === 2) return "#e5e600";
  else if (depth === 3) return "#339966";
  else return "#ffffff";
}

SleepArc.prototype.validate = function(data) {
  if (!data.sleep_jawbones) {
    this._active = false;
    console.log("data.sleep_jawbones não é valido")
  } else {
    console.log(data.sleep_jawbones)
    for (var i = 0; i < data.sleep_jawbones.length; i++) {
      dd = data.sleep_jawbones[i];
      dd.start = new Date(dd.start);
      dd.finish = new Date(dd.finish);
      dd.time_spent = dd.finish - dd.start;
      dd.color = this.colorFor(dd.name);
    };
  }
  return this._active;
}


SleepArc.prototype.draw = function(svg, data, outerRadius, innerRadius) {
  var max_activity = d3.max(data.activities, function(d) { return d.activity; });
  if ($('.clocks-relative-to-all').is(":checked")) {
    max_activity = max_selected_activity;
  }
  var activity_scale = d3.scale.linear().domain([0, max_activity]).range([0, 100]);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return 1; });

  var activityArc = d3.svg.arc()
      .innerRadius(innerRadius)
      .outerRadius(function(d) { 
        if (d.data.activity == "sleep") {
          return (outerRadius - innerRadius) * (activity_scale(max_activity) / 100.0) + innerRadius;
        } else {
          var value = (d.data.activity < (max_activity * 0.05) && d.data.activity != 0) ? (max_activity * 0.05) : d.data.activity
          return (outerRadius - innerRadius) * (activity_scale(value) / 100.0) + innerRadius;
        }
      });

  var activityOutlineArc = d3.svg.arc()
      .innerRadius(innerRadius)
      .outerRadius(outerRadius);

  var activitySvg = svg.append("g")
      .attr("class", "activity-arc")
      .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2 + ")");

  var path = activitySvg.selectAll(".solid-arc")
      .data(pie(data.activities))
    .enter().append("path")
      .attr("class", "solid-arc")
      .attr("d", activityArc);

  var clock = this._clock;
  var outerPath = activitySvg.selectAll(".outline-arc")
      .data(pie(data.activities))
    .enter().append("path")
      .attr("class", "outline-arc interaction-path")
      .attr("d", activityOutlineArc)
      .attr("stroke-width", function(d) { return d.data.ev ? '4px' : '2px' })
      .attr("stroke", function(d) { return d.data.ev ? '#444' : 'black' })
      .on("mouseover", function(d) { clock.arcMouseOn("Activity " + d.data.activity); })
      .on("mouseout", function(d) { clock.arcMouseOut(); })
      .on("mousedown", function(d, i) { clock.arcMouseClick(this, i + 1); });
}







/////////////////////////////////////////////////
// Work Arc
/////////////////////////////////////////////////

function WorkArc(clock) {
  this._clock = clock;
  this._active = true;
  this._width = 0.02;
}

WorkArc.prototype.colorFor = function(name) {
  if (name === "Aulas") return "#e5e600";
  else if (name === "Misc") return "#339966";
  else if (name === "Review") return "#0066cc";
  else if (name === "Reuniões") return "#ff00ff";
  else if (name === "Research") return "#ff6600";
  else return "#669999";
}

WorkArc.prototype.validate = function(data) {
  if (!data.works) {
    this._active = false;
  } else {
    for (var i = 0; i < data.works.length; i++) {
      dd = data.works[i];
      dd.start = new Date(dd.start);
      dd.finish = new Date(dd.finish);
      dd.time_spent = dd.finish - dd.start;
      dd.color = this.colorFor(dd.name);
    };
  }

  return this._active;
}

WorkArc.prototype.draw = function(svg, data, outerRadius, innerRadius) {
  var work_scale = d3.scale.linear().domain([0, 1440]).range([0, 360]);

  var workArc = d3.svg.arc()
      .innerRadius(innerRadius)
      .outerRadius(outerRadius);

  var workSvg = svg.append("g")
      .attr("class", "work-arc")
      .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2 + ")");

  var clock = this._clock;

  for (var i = 0; i < data.works.length; i++) {
    work = data.works[i];
    var workStartAngle = work_scale(work.start.getHours() * 60 + work.start.getMinutes()) * Math.PI / 180;
    var workEndAngle = work_scale(work.finish.getHours() * 60 + work.finish.getMinutes()) * Math.PI / 180;
    if (workStartAngle > workEndAngle) {
      workEndAngle += 6.28319; // 360 degrees
    }

    var dayPath = workSvg.append("path")
        .attr("class", "work-slice")
        .attr("data-ttip", work.name + ": " + work.time_spent / 60000 + " min")
        .attr("fill", function(d) { return work.color; })
        .attr("d", workArc.startAngle(function(d) {
                            return workStartAngle;
                          }).endAngle(function(d) {
                            return workEndAngle;
                          }))
        .on("mouseover", function(d) { clock.arcMouseOn($(this).data("ttip")); })
        .on("mouseout", function(d) { clock.arcMouseOut(); });
  }
}

/////////////////////////////////////////////////
// Text Arc
/////////////////////////////////////////////////

function TextArc(clock) {
  this._clock = clock;
  this._active = true;
}

TextArc.prototype.draw = function(svg, date) {
  var hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
  var textSvg = svg.append("g")
      .attr("class", "text-arc")
      .style("fill", fontColor)
      .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2 + ")");

  var degrees = 15 * Math.PI / 180;
  var textOffset = this._clock._size / 35;
  var radiusPercent = this._clock._radius * 0.75;
  var textLayer = textSvg.selectAll(".clock-label")
      .data(hours)
    .enter().append("text")
      .attr("class", "clock-label")
      .style("fill", fontColor)
      .attr("x", function(d) {
        return radiusPercent * Math.cos((degrees * d) + (degrees / 2) - 1.5708) - textOffset;
      })
      .attr("y", function(d) {
        return radiusPercent * Math.sin((degrees * d) + (degrees / 2) - 1.5708) + textOffset;
      })
      .text(function(d) {
        return d;
      });

  svg.append("svg:text")
    .attr("class", "clock-date")
    .attr("dy", ".35em")
    .attr("text-anchor", "middle")
    .style("fill", fontColor)
    .attr("transform", "translate(" + this._clock._size / 2 + "," + this._clock._size / 2.3 + ")")
    .text(date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear());
}

/////////////////////////////////////////////////
// Ajax function to load subdata
/////////////////////////////////////////////////

function showDataForClockSlice(element, user_id, date, hour, clock_width,sleep_jawbones) {
  element.selectAll("*").remove();

  element.append("divSleep")

  element.append("div")
      .attr("class", "close-slice")
    .append("a")
      .attr("class", "button round alert tiny")
      .text("X")
      .on("mousedown", function() {
        element.style("visibility", "hidden");
      });

  element.append("h3")
      .text((hour - 1) + "h - " + hour + "h")
    .append("small")
      .text(" of day " + date.getDate());

  var url = "/person/" + user_id + "/" + date.getFullYear() + "/" + (date.getMonth()+1) + "/" + date.getDate() + "/" + hour;
  $.ajax({
    url: url,
    success: function(data) {
      var xaxis = ['x'];
      var yaxis = ['activities'];
      data.forEach(function(d) {
        xaxis.push(new Date(d.datetime));
        yaxis.push(+d.activity);
      });

      var chart = c3.generate({
        bindto: element.append("div"),
        size: {
          height: 220
        },
        data: {
          x: 'x',
          columns: [xaxis, yaxis],
          type: 'bar'
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%H:%M'
            }
          }
        }
      });

      columns = ['sleep depth']
      values = []
      sleepNumber = 0
      for(i=0;i<sleep_jawbones.length;i++){
        var horario = new Date((sleep_jawbones[i].datetime))
        if(horario.getHours() == hour-1)
        {
          columns.push(sleep_jawbones[i].depth);
          values.push(horario)
          sleepNumber++;
        }
        
      }
      console.log(columns)

      group = [];
      for(i=0;i<columns.length;i++){
        group.push(columns[i][0]);
      }
      console.log(group)
      console.log(values)

      var chartSleep = c3.generate({
        bindto: element.append("divSleep"),
        size: {
          height: 100
        },
    data: {
      x: 'x',
  color: function (color, d)
    {
      for (i=0;i<sleep_jawbones.length;i++)
      {
        var time = new Date(sleep_jawbones[i].datetime)
        //console.log(d[0])
        //console.log(d[1])
        //console.log(sleep_jawbones[i].datetime)
        //if(d.value == sleep_jawbones[i].datetime)
        //{
          //console.log(d.value)
          //console.log(new Date(sleep_jawbones[i].datetime))
          if(d.value == 1){ return d.id && d3.rgb('#6baed6')} 
          else if(d.value == 2){return d.id && d3.rgb('#9edae5')}
          else if(d.value == 3){return d.id && d3.rgb('#c6dbef')}
        //}
      }
        
    },

        columns: [values,columns],
        type: 'bar',

    },
    axis:{
        x:{
          type: 'timeseries',
            tick: {
              format: '%H:%M'
            }
          
        }
    }
});



    },
    error: function() { console.log("Error loading slice data"); }
  });

  element.style("visibility", "visible");
}
